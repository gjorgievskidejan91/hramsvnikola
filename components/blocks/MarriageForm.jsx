"use client";

import { useState, useRef } from "react";
import { useRouter } from "next/navigation";
import toast from "react-hot-toast";
import { DateInput } from "@/components/ui/DateInput";
import { AutocompleteInput } from "@/components/ui/AutocompleteInput";
import { Input } from "@/components/ui/Input";
import { Textarea } from "@/components/ui/Textarea";
import { Button } from "@/components/ui/Button";
import { Select } from "@/components/ui/Select";
import { ChurchPlaceSelect, PLACES } from "@/components/ui/ChurchPlaceSelect";
import { createMarriage } from "@/app/actions/actionCreateMarriage";
import { updateMarriage } from "@/app/actions/actionUpdateMarriage";

/**
 * –§–æ—Ä–º–∞ –∑–∞ –≤–µ–Ω—á–∞–≤–∞—ö–µ - –∫—Ä–µ–∏—Ä–∞—ö–µ –∏ –∏–∑–º–µ–Ω–∞
 * @param {Object} props
 * @param {Object} props.initialData - –ò–Ω–∏—Ü–∏—ò–∞–ª–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –∑–∞ –∏–∑–º–µ–Ω–∞
 * @param {string} props.marriageId - ID –∑–∞ –∏–∑–º–µ–Ω–∞
 */
export function MarriageForm({ initialData, marriageId }) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState("");
  const [fieldErrors, setFieldErrors] = useState({});
  const formRef = useRef(null);

  const [formData, setFormData] = useState(
    initialData || {
      groom: {
        firstName: "",
        fatherName: "",
        lastName: "",
        profession: "",
        residence: "–ö—É–∫—É—Ä–µ—á–∞–Ω–∏",
        religion: "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–µ–Ω",
        nationality: "–ú–∞–∫–µ–¥–æ–Ω–µ—Ü",
        birthDate: { day: "", month: "", year: "" },
        maritalStatus: "",
        marriageNumber: "",
      },
      bride: {
        firstName: "",
        fatherName: "",
        lastName: "",
        profession: "",
        residence: "–ö—É–∫—É—Ä–µ—á–∞–Ω–∏",
        religion: "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–∞",
        nationality: "–ú–∞–∫–µ–¥–æ–Ω–∫–∞",
        birthDate: { day: "", month: "", year: "" },
        maritalStatus: "",
        marriageNumber: "",
      },
      marriage: {
        church: "–°–≤–µ—Ç–∏ –ù–∏–∫–æ–ª–∞",
        place: "–ö—É–∫—É—Ä–µ—á–∞–Ω–∏",
        date: { day: "", month: "", year: "" },
        priestName: "",
        bestMan: { firstName: "", lastName: "", residence: "" },
        witness: { firstName: "", lastName: "", residence: "" },
      },
      notes: "",
      pageNumber: "",
    }
  );

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError("");
    setFieldErrors({});

    try {
      const result = marriageId
        ? await updateMarriage(marriageId, formData)
        : await createMarriage(formData);

      if (result.success) {
        toast.success(
          marriageId
            ? "‚úÖ –ó–∞–ø–∏—Å–æ—Ç –µ —É—Å–ø–µ—à–Ω–æ –∞–∂—É—Ä–∏—Ä–∞–Ω!"
            : "‚úÖ –ó–∞–ø–∏—Å–æ—Ç –µ —É—Å–ø–µ—à–Ω–æ –∫—Ä–µ–∏—Ä–∞–Ω!",
          { duration: 3000 }
        );

        // Delay redirect to show toast
        setTimeout(() => {
          router.push("/venchani");
        }, 500);
      } else {
        const errorMsg = result.error || "–ù–∞—Å—Ç–∞–Ω–∞ –≥—Ä–µ—à–∫–∞.";
        setError(errorMsg);

        // Parse field errors if available
        if (result.fieldErrors) {
          setFieldErrors(result.fieldErrors);
        }

        toast.error("‚ùå " + errorMsg);

        // Scroll to top to show error message
        window.scrollTo({ top: 0, behavior: "smooth" });
      }
    } catch (err) {
      const errorMsg = "–ù–∞—Å—Ç–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—á—É–≤—É–≤–∞—ö–µ.";
      setError(errorMsg);
      toast.error("‚ùå " + errorMsg);
      window.scrollTo({ top: 0, behavior: "smooth" });
    } finally {
      setIsSubmitting(false);
    }
  };

  const updateField = (section, field, value) => {
    setFormData((prev) => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value,
      },
    }));
  };

  const updateNestedField = (section, parent, field, value) => {
    setFormData((prev) => ({
      ...prev,
      [section]: {
        ...prev[section],
        [parent]: {
          ...prev[section][parent],
          [field]: value,
        },
      },
    }));
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="space-y-6 sm:space-y-8 max-w-6xl mb-20 lg:mb-0"
    >
      {error && (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200 px-4 py-3 rounded-lg text-sm sm:text-base">
          {error}
        </div>
      )}

      {/* 1. –ú–ª–∞–¥–æ–∂–µ–Ω–µ—Ü - –û—Å–Ω–æ–≤–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          ü§µ –ú–ª–∞–¥–æ–∂–µ–Ω–µ—Ü
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <AutocompleteInput
            label="–ò–º–µ"
            field="firstName"
            type="groom"
            gender="male"
            value={formData.groom.firstName}
            onChange={(val) => updateField("groom", "firstName", val)}
            error={fieldErrors["groom.firstName"]}
            required
          />

          <AutocompleteInput
            label="–¢–∞—Ç–∫–æ–≤–æ –∏–º–µ"
            field="fatherName"
            type="groom"
            gender="male"
            value={formData.groom.fatherName}
            onChange={(val) => updateField("groom", "fatherName", val)}
            error={fieldErrors["groom.fatherName"]}
            required
          />

          <AutocompleteInput
            label="–ü—Ä–µ–∑–∏–º–µ"
            field="lastName"
            type="groom"
            value={formData.groom.lastName}
            onChange={(val) => updateField("groom", "lastName", val)}
            error={fieldErrors["groom.lastName"]}
            required
          />

          <Input
            label="–ü—Ä–æ—Ñ–µ—Å–∏—ò–∞"
            value={formData.groom.profession}
            onChange={(e) => updateField("groom", "profession", e.target.value)}
          />

          <Select
            label="–ú–µ—Å—Ç–æ –Ω–∞ –∂–∏–≤–µ–µ—ö–µ"
            value={formData.groom.residence}
            onChange={(val) => updateField("groom", "residence", val)}
            options={PLACES}
            allowCustom={true}
          />

          <Select
            label="–í–µ—Ä–∞"
            value={formData.groom.religion}
            onChange={(val) => updateField("groom", "religion", val)}
            options={["–ü—Ä–∞–≤–æ—Å–ª–∞–≤–µ–Ω", "–ö–∞—Ç–æ–ª–∏–∫", "–ú—É—Å–ª–∏–º–∞–Ω", "–ü—Ä–æ—Ç–µ—Å—Ç–∞–Ω—Ç"]}
            allowCustom={true}
          />

          <Select
            label="–ù–∞—Ä–æ–¥–Ω–æ—Å—Ç"
            value={formData.groom.nationality}
            onChange={(val) => updateField("groom", "nationality", val)}
            options={[
              "–ú–∞–∫–µ–¥–æ–Ω–µ—Ü",
              "–ê–ª–±–∞–Ω–µ—Ü",
              "–¢—É—Ä—á–∏–Ω",
              "–†–æ–º",
              "–°—Ä–±–∏–Ω",
              "–ë–æ—à—ö–∞–∫",
              "–í–ª–∞–≤",
            ]}
            allowCustom={true}
          />
        </div>
      </section>

      {/* 2. –ù–µ–≤–µ—Å—Ç–∞ - –û—Å–Ω–æ–≤–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üë∞ –ù–µ–≤–µ—Å—Ç–∞
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <AutocompleteInput
            label="–ò–º–µ"
            field="firstName"
            type="bride"
            gender="female"
            value={formData.bride.firstName}
            onChange={(val) => updateField("bride", "firstName", val)}
            error={fieldErrors["bride.firstName"]}
            required
          />

          <AutocompleteInput
            label="–¢–∞—Ç–∫–æ–≤–æ –∏–º–µ"
            field="fatherName"
            type="bride"
            gender="male"
            value={formData.bride.fatherName}
            onChange={(val) => updateField("bride", "fatherName", val)}
            error={fieldErrors["bride.fatherName"]}
            required
          />

          <AutocompleteInput
            label="–ü—Ä–µ–∑–∏–º–µ"
            field="lastName"
            type="bride"
            value={formData.bride.lastName}
            onChange={(val) => updateField("bride", "lastName", val)}
            error={fieldErrors["bride.lastName"]}
            required
          />

          <Input
            label="–ü—Ä–æ—Ñ–µ—Å–∏—ò–∞"
            value={formData.bride.profession}
            onChange={(e) => updateField("bride", "profession", e.target.value)}
          />

          <Select
            label="–ú–µ—Å—Ç–æ –Ω–∞ –∂–∏–≤–µ–µ—ö–µ"
            value={formData.bride.residence}
            onChange={(val) => updateField("bride", "residence", val)}
            options={PLACES}
            allowCustom={true}
          />

          <Select
            label="–í–µ—Ä–∞"
            value={formData.bride.religion}
            onChange={(val) => updateField("bride", "religion", val)}
            options={["–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–∞", "–ö–∞—Ç–æ–ª–∏—á–∫–∞", "–ú—É—Å–ª–∏–º–∞–Ω–∫–∞", "–ü—Ä–æ—Ç–µ—Å—Ç–∞–Ω—Ç–∫–∞"]}
            allowCustom={true}
          />

          <Select
            label="–ù–∞—Ä–æ–¥–Ω–æ—Å—Ç"
            value={formData.bride.nationality}
            onChange={(val) => updateField("bride", "nationality", val)}
            options={[
              "–ú–∞–∫–µ–¥–æ–Ω–∫–∞",
              "–ê–ª–±–∞–Ω–∫–∞",
              "–¢—É—Ä–∫–∏–Ω–∫–∞",
              "–†–æ–º–∫–∞",
              "–°—Ä–ø–∫–∏—ö–∞",
              "–ë–æ—à—ö–∞—á–∫–∞",
              "–í–ª–∞—à–∫–∞",
            ]}
            allowCustom={true}
          />
        </div>
      </section>

      {/* 3. –î–∞—Ç—É–º –Ω–∞ —Ä–∞—ì–∞—ö–µ */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üìÖ –î–∞—Ç—É–º –Ω–∞ —Ä–∞—ì–∞—ö–µ
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <DateInput
            label="–î–∞—Ç—É–º –Ω–∞ —Ä–∞—ì–∞—ö–µ - –ú–ª–∞–¥–æ–∂–µ–Ω–µ—Ü"
            value={formData.groom.birthDate}
            onChange={(val) => updateField("groom", "birthDate", val)}
          />

          <DateInput
            label="–î–∞—Ç—É–º –Ω–∞ —Ä–∞—ì–∞—ö–µ - –ù–µ–≤–µ—Å—Ç–∞"
            value={formData.bride.birthDate}
            onChange={(val) => updateField("bride", "birthDate", val)}
          />
        </div>
      </section>

      {/* 4. –ë—Ä–∞—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üíç –ë—Ä–∞—á–µ–Ω —Å—Ç–∞—Ç—É—Å
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <Input
            label="–ë—Ä–∞—á–µ–Ω —Å—Ç–∞—Ç—É—Å - –ú–ª–∞–¥–æ–∂–µ–Ω–µ—Ü"
            value={formData.groom.maritalStatus}
            onChange={(e) =>
              updateField("groom", "maritalStatus", e.target.value)
            }
          />

          <Input
            label="–ë—Ä–∞—á–µ–Ω —Å—Ç–∞—Ç—É—Å - –ù–µ–≤–µ—Å—Ç–∞"
            value={formData.bride.maritalStatus}
            onChange={(e) =>
              updateField("bride", "maritalStatus", e.target.value)
            }
          />

          <Input
            label="–î–∞—Ç—É–º –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∞—á–µ–Ω —Å—Ç–∞—Ç—É—Å - –ú–ª–∞–¥–æ–∂–µ–Ω–µ—Ü"
            type="date"
            value={formData.groom.previousStatusDate || ""}
            onChange={(e) =>
              updateField("groom", "previousStatusDate", e.target.value)
            }
          />

          <Input
            label="–î–∞—Ç—É–º –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∞—á–µ–Ω —Å—Ç–∞—Ç—É—Å - –ù–µ–≤–µ—Å—Ç–∞"
            type="date"
            value={formData.bride.previousStatusDate || ""}
            onChange={(e) =>
              updateField("bride", "previousStatusDate", e.target.value)
            }
          />

          <Input
            label="–í–æ –∫–æ—ò –±—Ä–∞–∫ —Å—Ç–∞–ø—É–≤–∞ - –ú–ª–∞–¥–æ–∂–µ–Ω–µ—Ü"
            type="number"
            value={formData.groom.marriageNumber}
            onChange={(e) =>
              updateField("groom", "marriageNumber", e.target.value)
            }
          />

          <Input
            label="–í–æ –∫–æ—ò –±—Ä–∞–∫ —Å—Ç–∞–ø—É–≤–∞ - –ù–µ–≤–µ—Å—Ç–∞"
            type="number"
            value={formData.bride.marriageNumber}
            onChange={(e) =>
              updateField("bride", "marriageNumber", e.target.value)
            }
          />
        </div>
      </section>

      {/* 5. –•—Ä–∞–º –∏ –º–µ—Å—Ç–æ –Ω–∞ –≤–µ–Ω—á–∞–≤–∞—ö–µ */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          ‚õ™ –•—Ä–∞–º –∏ –º–µ—Å—Ç–æ –Ω–∞ –≤–µ–Ω—á–∞–≤–∞—ö–µ
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <ChurchPlaceSelect
            churchValue={formData.marriage.church}
            placeValue={formData.marriage.place}
            onChurchChange={(val) => updateField("marriage", "church", val)}
            onPlaceChange={(val) => updateField("marriage", "place", val)}
            autoPopulate={true}
          />
        </div>
      </section>

      {/* 6. –î–∞—Ç—É–º –Ω–∞ –≤–µ–Ω—á–∞–≤–∞—ö–µ */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üíí –î–∞—Ç—É–º –Ω–∞ –≤–µ–Ω—á–∞–≤–∞—ö–µ
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <DateInput
            label="–î–∞—Ç—É–º –Ω–∞ –≤–µ–Ω—á–∞–≤–∞—ö–µ"
            value={formData.marriage.date}
            onChange={(val) => updateField("marriage", "date", val)}
            error={
              fieldErrors["marriage.date.day"] ||
              fieldErrors["marriage.date.month"] ||
              fieldErrors["marriage.date.year"]
            }
            required
          />
        </div>
      </section>

      {/* 7. –°–≤–µ—à—Ç–µ–Ω–∏–∫ */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          ‚úü –°–≤–µ—à—Ç–µ–Ω–∏–∫
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <AutocompleteInput
            label="–ò–º–µ –∏ –ø—Ä–µ–∑–∏–º–µ –Ω–∞ –°–≤–µ—à—Ç–µ–Ω–∏–∫–æ—Ç"
            field="priest"
            type="marriage"
            value={formData.marriage.priestName}
            onChange={(val) => updateField("marriage", "priestName", val)}
          />
        </div>
      </section>

      {/* 8. –ö—É–º –∏ –°—Ç–∞—Ä —Å–≤–∞—Ç */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üë• –ö—É–º –∏ –°—Ç–∞—Ä —Å–≤–∞—Ç
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <AutocompleteInput
            label="–ö—É–º - –ò–º–µ"
            field="firstName"
            type="marriage"
            gender="male"
            value={formData.marriage.bestMan.firstName}
            onChange={(val) =>
              updateNestedField("marriage", "bestMan", "firstName", val)
            }
          />

          <AutocompleteInput
            label="–ö—É–º - –ü—Ä–µ–∑–∏–º–µ"
            field="lastName"
            type="marriage"
            value={formData.marriage.bestMan.lastName}
            onChange={(val) =>
              updateNestedField("marriage", "bestMan", "lastName", val)
            }
          />

          <Input
            label="–ö—É–º - –ú–µ—Å—Ç–æ –Ω–∞ –∂–∏–≤–µ–µ—ö–µ"
            value={formData.marriage.bestMan.residence}
            onChange={(e) =>
              updateNestedField(
                "marriage",
                "bestMan",
                "residence",
                e.target.value
              )
            }
          />

          <div></div>

          <AutocompleteInput
            label="–°—Ç–∞—Ä —Å–≤–∞—Ç - –ò–º–µ"
            field="firstName"
            type="marriage"
            gender="male"
            value={formData.marriage.witness.firstName}
            onChange={(val) =>
              updateNestedField("marriage", "witness", "firstName", val)
            }
          />

          <AutocompleteInput
            label="–°—Ç–∞—Ä —Å–≤–∞—Ç - –ü—Ä–µ–∑–∏–º–µ"
            field="lastName"
            type="marriage"
            value={formData.marriage.witness.lastName}
            onChange={(val) =>
              updateNestedField("marriage", "witness", "lastName", val)
            }
          />

          <Input
            label="–°—Ç–∞—Ä —Å–≤–∞—Ç - –ú–µ—Å—Ç–æ –Ω–∞ –∂–∏–≤–µ–µ—ö–µ"
            value={formData.marriage.witness.residence}
            onChange={(e) =>
              updateNestedField(
                "marriage",
                "witness",
                "residence",
                e.target.value
              )
            }
          />
        </div>
      </section>

      {/* –ó–∞–±–µ–ª–µ—à–∫–∏ –∏ –ò–∑–≤–æ—Ä */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üìù –ó–∞–±–µ–ª–µ—à–∫–∏ –∏ –ò–∑–≤–æ—Ä
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <Input
            label="–°—Ç—Ä–∞–Ω–∞ –æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞ –∫–Ω–∏–≥–∞"
            type="number"
            placeholder="–ë—Ä–æ—ò –Ω–∞ —Å—Ç—Ä–∞–Ω–∞..."
            value={formData.pageNumber}
            onChange={(e) =>
              setFormData({ ...formData, pageNumber: e.target.value })
            }
          />
          <div></div>
        </div>
        <div className="mt-4">
          <Textarea
            label="–ó–∞–±–µ–ª–µ—à–∫–∞"
            value={formData.notes}
            onChange={(e) =>
              setFormData({ ...formData, notes: e.target.value })
            }
            rows={4}
          />
        </div>
      </section>

      {/* –ö–æ–ø—á–∏—ö–∞ */}
      <div className="flex gap-3 pt-2">
        <Button
          type="submit"
          disabled={isSubmitting}
          className="flex-1 sm:flex-none py-3 sm:py-2 text-base sm:text-sm"
        >
          {isSubmitting ? "–°–µ –∑–∞—á—É–≤—É–≤–∞..." : "–ó–∞—á—É–≤–∞—ò"}
        </Button>
        <Button
          type="button"
          variant="secondary"
          onClick={() => router.back()}
          disabled={isSubmitting}
          className="flex-1 sm:flex-none py-3 sm:py-2 text-base sm:text-sm"
        >
          –û—Ç–∫–∞–∂–∏
        </Button>
      </div>
    </form>
  );
}
