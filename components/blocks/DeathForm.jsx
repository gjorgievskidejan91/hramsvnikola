"use client";

import { useState, useRef } from "react";
import { useRouter } from "next/navigation";
import toast from "react-hot-toast";
import { DateInput } from "@/components/ui/DateInput";
import { DateInputPartial } from "@/components/ui/DateInputPartial";
import { AutocompleteInput } from "@/components/ui/AutocompleteInput";
import { Input } from "@/components/ui/Input";
import { Textarea } from "@/components/ui/Textarea";
import { Button } from "@/components/ui/Button";
import { Select } from "@/components/ui/Select";
import { RadioToggle } from "@/components/ui/RadioToggle";
import { PLACES } from "@/components/ui/ChurchPlaceSelect";
import { createDeath } from "@/app/actions/actionCreateDeath";
import { updateDeath } from "@/app/actions/actionUpdateDeath";

/**
 * –§–æ—Ä–º–∞ –∑–∞ —É–º—Ä–µ–Ω - –∫—Ä–µ–∏—Ä–∞—ö–µ –∏ –∏–∑–º–µ–Ω–∞
 * @param {Object} props
 * @param {Object} props.initialData - –ò–Ω–∏—Ü–∏—ò–∞–ª–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –∑–∞ –∏–∑–º–µ–Ω–∞
 * @param {string} props.deathId - ID –∑–∞ –∏–∑–º–µ–Ω–∞
 */
export function DeathForm({ initialData, deathId }) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState("");
  const [fieldErrors, setFieldErrors] = useState({});
  const formRef = useRef(null);

  const [formData, setFormData] = useState(
    initialData || {
      deceased: {
        firstName: "",
        fatherName: "",
        lastName: "",
        profession: "",
        maritalStatus: "",
        religion: "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–∞",
        gender: "",
        birthPlace: "–ë–∏—Ç–æ–ª–∞",
        birthDate: { day: "", month: "", year: "" },
      },
      death: {
        place: "–ö—É–∫—É—Ä–µ—á–∞–Ω–∏",
        date: { day: "", month: "", year: "" },
        causeOfDeath: "",
      },
      burial: {
        date: { day: "", month: "", year: "" },
        place: "–ö—É–∫—É—Ä–µ—á–∞–Ω–∏",
        priestName: "",
        confessed: "–ù–µ",
      },
      notes: "",
      pageNumber: "",
    }
  );

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError("");
    setFieldErrors({});

    try {
      const result = deathId
        ? await updateDeath(deathId, formData)
        : await createDeath(formData);

      if (result.success) {
        toast.success(
          deathId
            ? "‚úÖ –ó–∞–ø–∏—Å–æ—Ç –µ —É—Å–ø–µ—à–Ω–æ –∞–∂—É—Ä–∏—Ä–∞–Ω!"
            : "‚úÖ –ó–∞–ø–∏—Å–æ—Ç –µ —É—Å–ø–µ—à–Ω–æ –∫—Ä–µ–∏—Ä–∞–Ω!",
          { duration: 3000 }
        );

        // Delay redirect to show toast
        setTimeout(() => {
          router.push("/umreni");
        }, 500);
      } else {
        const errorMsg = result.error || "–ù–∞—Å—Ç–∞–Ω–∞ –≥—Ä–µ—à–∫–∞.";
        setError(errorMsg);

        // Parse field errors if available
        if (result.fieldErrors) {
          setFieldErrors(result.fieldErrors);
        }

        toast.error("‚ùå " + errorMsg);
        window.scrollTo({ top: 0, behavior: "smooth" });
      }
    } catch (err) {
      const errorMsg = "–ù–∞—Å—Ç–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—á—É–≤—É–≤–∞—ö–µ.";
      setError(errorMsg);
      toast.error("‚ùå " + errorMsg);
      window.scrollTo({ top: 0, behavior: "smooth" });
    } finally {
      setIsSubmitting(false);
    }
  };

  const updateField = (section, field, value) => {
    setFormData((prev) => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value,
      },
    }));
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="space-y-6 sm:space-y-8 max-w-6xl mb-20 lg:mb-0"
    >
      {error && (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200 px-4 py-3 rounded-lg text-sm sm:text-base">
          {error}
        </div>
      )}

      {/* 1. –û—Å–Ω–æ–≤–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –∑–∞ —É–º—Ä–µ–Ω–∏–æ—Ç */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          ‚úùÔ∏è –ü–æ–¥–∞—Ç–æ—Ü–∏ –∑–∞ –£–º—Ä–µ–Ω–∏–æ—Ç
        </h2>

        {/* –ü–æ–ª - Toggle Buttons */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –ü–æ–ª <span className="text-red-500 ml-1">*</span>
          </label>
          <div className="inline-flex rounded-lg border border-gray-300 dark:border-gray-600 overflow-hidden">
            <button
              type="button"
              onClick={() => updateField("deceased", "gender", "–ú–∞—à–∫–∏")}
              className={`px-6 py-3 sm:px-8 sm:py-2.5 text-sm font-medium transition-colors ${
                formData.deceased.gender === "–ú–∞—à–∫–∏"
                  ? "bg-primary-600 text-white"
                  : "bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700"
              }`}
            >
              –ú–∞—à–∫–∏
            </button>
            <button
              type="button"
              onClick={() => updateField("deceased", "gender", "–ñ–µ–Ω—Å–∫–∏")}
              className={`px-6 py-3 sm:px-8 sm:py-2.5 text-sm font-medium transition-colors border-l border-gray-300 dark:border-gray-600 ${
                formData.deceased.gender === "–ñ–µ–Ω—Å–∫–∏"
                  ? "bg-primary-600 text-white"
                  : "bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700"
              }`}
            >
              –ñ–µ–Ω—Å–∫–∏
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <AutocompleteInput
            label="–ò–º–µ"
            field="firstName"
            type="deceased"
            gender={
              formData.deceased.gender === "–ú–∞—à–∫–∏"
                ? "male"
                : formData.deceased.gender === "–ñ–µ–Ω—Å–∫–∏"
                ? "female"
                : undefined
            }
            value={formData.deceased.firstName}
            onChange={(val) => updateField("deceased", "firstName", val)}
            error={fieldErrors["deceased.firstName"]}
            required
          />

          <AutocompleteInput
            label="–¢–∞—Ç–∫–æ–≤–æ –∏–º–µ"
            field="fatherName"
            type="deceased"
            gender="male"
            value={formData.deceased.fatherName}
            onChange={(val) => updateField("deceased", "fatherName", val)}
          />

          <AutocompleteInput
            label="–ü—Ä–µ–∑–∏–º–µ"
            field="lastName"
            type="deceased"
            value={formData.deceased.lastName}
            onChange={(val) => updateField("deceased", "lastName", val)}
            error={fieldErrors["deceased.lastName"]}
            required
          />

          <Input
            label="–ü—Ä–æ—Ñ–µ—Å–∏—ò–∞"
            value={formData.deceased.profession}
            onChange={(e) =>
              updateField("deceased", "profession", e.target.value)
            }
          />

          <Select
            label="–ë—Ä–∞—á–µ–Ω —Å—Ç–∞—Ç—É—Å"
            value={formData.deceased.maritalStatus}
            onChange={(val) => updateField("deceased", "maritalStatus", val)}
            options={["–ù–µ–∂–µ–Ω–µ—Ç/–ù–µ–º–∞–∂–µ–Ω–∞", "–ñ–µ–Ω–µ—Ç/–ú–∞–∂–µ–Ω–∞", "–í–¥–æ–≤–µ—Ü/–í–¥–æ–≤–∏—Ü–∞"]}
            allowCustom={true}
          />

          <Select
            label="–í–µ—Ä–∞"
            value={formData.deceased.religion}
            onChange={(val) => updateField("deceased", "religion", val)}
            options={[
              "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–∞",
              "–ö–∞—Ç–æ–ª–∏—á–∫–∞",
              "–ú—É—Å–ª–∏–º–∞–Ω—Å–∫–∞",
              "–ü—Ä–æ—Ç–µ—Å—Ç–∞–Ω—Ç—Å–∫–∞",
            ]}
            allowCustom={true}
          />
        </div>
      </section>

      {/* 2. –ú–µ—Å—Ç–æ –∏ –¥–∞—Ç—É–º –Ω–∞ —É–º–∏—Ä–∞—ö–µ */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üïØÔ∏è –£–º–∏—Ä–∞—ö–µ
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <Select
            label="–ú–µ—Å—Ç–æ –∫–∞–¥–µ —É–º—Ä–µ–ª"
            value={formData.death.place}
            onChange={(val) => updateField("death", "place", val)}
            options={PLACES}
            allowCustom={true}
          />

          <DateInputPartial
            label="–î–∞—Ç—É–º –Ω–∞ —É–º–∏—Ä–∞—ö–µ"
            value={formData.death.date}
            onChange={(val) => updateField("death", "date", val)}
            error={fieldErrors["death.date.year"]}
            required
          />
        </div>
      </section>

      {/* 3. –î–∞—Ç—É–º –∏ –º–µ—Å—Ç–æ –Ω–∞ –ø–æ–≥—Ä–µ–± */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          ‚õ™ –ü–æ–≥—Ä–µ–±
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <DateInputPartial
            label="–î–∞—Ç—É–º –Ω–∞ –ø–æ–≥—Ä–µ–±"
            value={formData.burial.date}
            onChange={(val) => updateField("burial", "date", val)}
          />

          <Select
            label="–ú–µ—Å—Ç–æ –Ω–∞ –ø–æ–≥—Ä–µ–±"
            value={formData.burial.place}
            onChange={(val) => updateField("burial", "place", val)}
            options={PLACES}
            allowCustom={true}
          />
        </div>
      </section>

      {/* 4. –ú–µ—Å—Ç–æ –∏ –¥–∞—Ç–∞ –Ω–∞ —Ä–∞—ì–∞—ö–µ */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üìç –†–∞—ì–∞—ö–µ
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <Select
            label="–ú–µ—Å—Ç–æ –Ω–∞ —Ä–∞—ì–∞—ö–µ"
            value={formData.deceased.birthPlace}
            onChange={(val) => updateField("deceased", "birthPlace", val)}
            options={PLACES}
            allowCustom={true}
          />

          <DateInput
            label="–î–∞—Ç–∞ –Ω–∞ —Ä–∞—ì–∞—ö–µ"
            value={formData.deceased.birthDate}
            onChange={(val) => updateField("deceased", "birthDate", val)}
          />
        </div>
      </section>

      {/* 5. –°–≤–µ—à—Ç–µ–Ω–∏–∫ –∏ –∏—Å–ø–æ–≤–µ–¥ */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          ‚úü –°–≤–µ—à—Ç–µ–Ω–∏–∫ –∏ –ò—Å–ø–æ–≤–µ–¥
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <AutocompleteInput
            label="–°–≤–µ—à—Ç–µ–Ω–∏–∫ (–∏–º–µ –∏ –ø—Ä–µ–∑–∏–º–µ)"
            field="priest"
            type="burial"
            value={formData.burial.priestName}
            onChange={(val) => updateField("burial", "priestName", val)}
          />

          <RadioToggle
            label="–î–∞–ª–∏ —Å–µ –∏—Å–ø–æ–≤–µ–¥–∞–ª"
            value={formData.burial.confessed}
            onChange={(val) => updateField("burial", "confessed", val)}
          />
        </div>
      </section>

      {/* 6. –ü—Ä–∏—á–∏–Ω–∞ –∑–∞ —Å–º—Ä—Ç */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üíä –ü—Ä–∏—á–∏–Ω–∞ –∑–∞ –°–º—Ä—Ç
        </h2>
        <div className="grid grid-cols-1 gap-4 sm:gap-6">
          <Textarea
            label="–û–¥ –∫–∞–∫–≤–∞ –±–æ–ª–µ—Å—Ç –∏–ª–∏ –Ω–∞—á–∏–Ω –Ω–∞ —É–º–∏—Ä–∞—ö–µ"
            value={formData.death.causeOfDeath}
            onChange={(e) =>
              updateField("death", "causeOfDeath", e.target.value)
            }
            rows={3}
          />
        </div>
      </section>

      {/* –ó–∞–±–µ–ª–µ—à–∫–∏ –∏ –ò–∑–≤–æ—Ä */}
      <section className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow">
        <h2 className="text-lg sm:text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üìù –ó–∞–±–µ–ª–µ—à–∫–∏ –∏ –ò–∑–≤–æ—Ä
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <Input
            label="–°—Ç—Ä–∞–Ω–∞ –æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞ –∫–Ω–∏–≥–∞"
            type="number"
            placeholder="–ë—Ä–æ—ò –Ω–∞ —Å—Ç—Ä–∞–Ω–∞..."
            value={formData.pageNumber}
            onChange={(e) =>
              setFormData({ ...formData, pageNumber: e.target.value })
            }
          />
          <div></div>
        </div>
        <div className="mt-4">
          <Textarea
            label="–ó–∞–±–µ–ª–µ—à–∫–∞"
            value={formData.notes}
            onChange={(e) =>
              setFormData({ ...formData, notes: e.target.value })
            }
            rows={4}
          />
        </div>
      </section>

      {/* –ö–æ–ø—á–∏—ö–∞ */}
      <div className="flex gap-3 pt-2">
        <Button
          type="submit"
          disabled={isSubmitting}
          className="flex-1 sm:flex-none py-3 sm:py-2 text-base sm:text-sm"
        >
          {isSubmitting ? "–°–µ –∑–∞—á—É–≤—É–≤–∞..." : "–ó–∞—á—É–≤–∞—ò"}
        </Button>
        <Button
          type="button"
          variant="secondary"
          onClick={() => router.back()}
          disabled={isSubmitting}
          className="flex-1 sm:flex-none py-3 sm:py-2 text-base sm:text-sm"
        >
          –û—Ç–∫–∞–∂–∏
        </Button>
      </div>
    </form>
  );
}
